{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.ts","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.ts","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","role","aria-label","onSubmit","e","preventDefault","trim","length","cats","find","cat","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","defaultProps","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","aria-labelledby","propType","PropTypes","string","isRequired","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,cACzB,EAAoCC,mBAAiB,IAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,mCACI,sBAAMC,KAAK,SAASC,aAAW,eAAeC,SAfjC,SAACC,GAClBA,EAAEC,iBAEEN,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAEV,OADcA,EAAKC,MAAK,SAAAC,GAAG,OAAIA,IAAQX,KACrB,YAAIS,GAChB,CAAET,GAAR,mBAAuBS,OAE3BR,EAAc,MAMd,SACI,uBAAOW,KAAK,OAAOT,aAAW,SAASU,YAAY,SAASC,MAAOd,EAAYe,SApBjE,SAACV,GACvBJ,EAAcI,EAAEW,OAAOF,e,+BCDlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAeD,EAAKE,KAAK,SAACC,GAAqB,IAAD,EAChD,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,IAAvBH,EAAsB,EAAtBA,MAAOV,EAAe,EAAfA,IAChC,OACI,sBAAKlB,KAAK,WAAWgC,UAAU,2CAA/B,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACnB,4BAAIA,QAShBG,EAAYI,aAAe,CACvBR,GAAI,I,YCRKS,EAAU,SAAC,GAAsB,IAArBpB,EAAoB,EAApBA,SACrB,ECFwB,SAACA,GACzB,MAA0BnB,mBAAqB,CAC3C0B,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNzB,EAAQC,GACHyB,MAAM,SAAAC,GACHH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGtB,CAACrB,IAEGsB,EDd0BK,CAAa3B,GAAhCa,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACI,mCACI,sBAAKrC,KAAK,SAAS4C,kBAAgB,QAAnC,UACI,oBAAIjB,GAAG,QAAQK,UAAU,iBAAzB,SAA4ChB,IAC1CqB,GAAW,mBAAGL,UAAU,iBAAb,wBACb,qBAAKhC,KAAK,OAAOgC,UAAU,+BAA3B,SACKH,EAAOJ,KAAK,SAACC,GAAD,OACT,cAAC,EAAD,eAEIA,GADCA,EAAIC,eAWjCS,EAAQS,SAAW,CACf7B,S,OAAU8B,EAAUC,OAAOC,YE9BxB,IAAMC,EAAe,SAAC,GAAsC,IAAD,IAAnCC,yBAAmC,MAAf,GAAe,EAC9D,EAAsCrD,mBAAmBqD,GAAzD,mBAAQC,EAAR,KAAoBvD,EAApB,KAEA,OACI,qCACI,oBAAIoC,UAAU,QAAd,SACI,sBAAMA,UAAU,aAAhB,4BAEJ,cAAC,EAAD,CAAapC,cAAeA,IAC5B,uBACCuD,EAAW1B,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAUA,GADLA,U,MCfzBoC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.86ef7e05.chunk.js","sourcesContent":["import React, { ChangeEvent, Dispatch, FormEvent, SetStateAction, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface Props {\n    setCategories: Dispatch<SetStateAction<string[]>>;\n}\n\nexport const AddCategory = ({setCategories}: Props) => {\n    const [inputValue, setInputValue] = useState<string>('');\n\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => {\n                const exist = cats.find(cat => cat === inputValue);\n                if (exist) return [...cats]; \n                return [inputValue, ...cats]\n            });\n            setInputValue('');\n        }\n    }\n\n    return (\n        <>\n            <form role=\"search\" aria-label=\"Search a gif\" onSubmit={handleSubmit}>\n                <input type=\"text\" aria-label=\"Search\" placeholder=\"Search\" value={inputValue} onChange={handleInputChange}/>\n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}","interface IGifs {\n    id: string;\n    title: string;\n    url: string;\n}\n\ninterface IImageObjt extends IGifs {\n    images?: {downsized_medium: { url: string } };\n}\n\nexport const getGifs = async(category:string) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=43NQ4ZWRj9t2xCXUDMX3HKGQHYpm7Uzp&q=${encodeURI(category)}&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs:IGifs[] = data.map( (img:IImageObjt)  => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\nimport PropTypes from 'prop-types';\n\n//IGifs\nexport interface Props {\n    title: string;\n    url: string;\n}\n\nexport const GifGridItem = ({title, url}:Props) => {\n    return (\n        <div role=\"listitem\" className=\"card animate__animated animate__fadeInUp\">\n           <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n};\nGifGridItem.defaultProps = {\n    id: ''\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nimport PropTypes from 'prop-types';\n\ntype Props = {\n    category: string;\n}\n\ninterface IGifs {\n    id: string;\n    title: string;\n    url: string;\n}\n\nexport const GifGrid = ({category}:Props) => {\n    const { data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <div role=\"region\" aria-labelledby=\"title\">\n                <h3 id=\"title\" className=\"category-title\">{ category }</h3>\n                { loading && <p className=\"animate__pulse\">Loading...</p> }\n                <div role=\"list\" className=\"card-grid animate__slideInUp\">\n                    {images.map( (img:IGifs) => (\n                        <GifGridItem\n                        key={img.id}\n                        {...img}\n                        />\n                    ))}\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nGifGrid.propType = {\n    category: PropTypes.string.isRequired\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\ninterface IGifs{\n    id: string;\n    title: string;\n    url: string;\n}\n\nexport interface IFetchGifs {\n    data: IGifs[];\n    loading: boolean;\n}\n\nexport const useFetchGifs = (category:string) => {\n    const [state, setState] = useState<IFetchGifs>({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport interface Props {\n    defaultCategories?: string[];\n}\n\nexport const GifExpertApp = ( {defaultCategories = []}: Props) => {\n    const [ categories, setCategories ] = useState<string[]>(defaultCategories);\n\n    return (\n        <>\n            <h2 className=\"title\">\n                <span className=\"title-text\">GifExpertApp</span>\n            </h2>\n            <AddCategory setCategories={setCategories} />\n            <hr/>\n            {categories.map( category => (\n                <GifGrid \n                    key={category}\n                    category={category} \n                />\n            ))}\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}